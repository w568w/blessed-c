---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults
title:  "Blessed C List"
layout: post
---

## Tooling

Tools you may need throughout the development process: development, building, testing, and debugging.

### About Development
<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|Standard Library|[**glibc**](https://www.gnu.org/software/libc/) <br> The most widely used C standard library. <br> [**musl**](https://musl.libc.org) <br> Light-weight and efficient C standard library, designed for static linking. <br> [**uClibc-ng**](https://uclibc-ng.org/) <br> Another light-weight C standard library, designed for embedded systems. |
|Package Manager|[**Conan**](https://conan.io) <br> A C/C++ package manager, similar to npm or pip. <br> [**vcpkg**](https://vcpkg.io/) <br> Open-source cross-platform package manager from Microsoft. <br> [**pkg-config**](https://www.freedesktop.org/wiki/Software/pkg-config/) <br> A helper tool for using libraries. Not really a package manager, but widely used to help find libraries installed on a system. |
|Language Server|[**clangd**](https://clangd.llvm.org) <br> Adds smart features to your editor: code completion, compile errors, go-to-definition and more.|

</div>

### About Building
<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|Toolchain|[**GCC C Compiler**](https://gcc.gnu.org/) <br> Widely used compiler for Un*x system. <br> [**Clang**](https://clang.llvm.org/) <br> A C frontend that compiles C into LLVM IR. Also very popular. <br> [**MSVC**](https://visualstudio.microsoft.com/) <br> Microsoft's C compiler toolchain, mainly for Windows. |
|Build System|[**Autotools**](https://www.gnu.org/software/automake/manual/html_node/GNU-Build-System.html) <br> One of the most widely used build systems (configure && make). <br> [**CMake**](https://cmake.org) <br> The de-facto standard for building modern C/C++ code.|
|Documentation Generator|[**Doxygen**](https://www.doxygen.nl) <br> The most widely used documentation generator for C. Default theme looks not very attractive but you can customize it.|


</div>

### About Testing
<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|Benchmarking|[**hyperfine**](https://github.com/sharkdp/hyperfine) <br> Tool for benchmarking compiled binaries (similar to unix time command but better). |
|Testing|[**Criterion**](https://github.com/Snaipe/Criterion) <br> Simple yet powerful unit testing framework, C99-compatible. <br> [**Unity**](https://github.com/ThrowTheSwitch/Unity) <br> Another simple unit testing framework, focusing on embedded systems (8-bit to 64-bit systems supported). |

</div>


## Common
Very common tools that every C developer should know about.

### General
General use case.

<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|UUIDs|[**uuid4**](https://github.com/rxi/uuid4) <br> Simple implementation of UUID v4. Unmaintained. |
|Gzip (de)compression|[**zlib**](https://github.com/madler/zlib) <br> Official zlib library.|
|Logging|[**zlog**](https://github.com/HardySimpson/zlog) <br> High-performance & thread safe logging library. POSIX/Windows compatible. <br> **syslog** <br> GNU C library's syslog helper functions. Available on most Un*x systems, and should be used if you are writing a OS-related tool.|
|HTTP Request|[**libcurl**](https://curl.se/libcurl/) <br> The most widely used client-side URL transfer library.|
|All-In-One Utility|*Sometimes you may want to use a library that does many things in a uniform and portable way. Here are some of them. To keep the list brief, all features cannot be listed here.* <br> [**GLib**](https://gitlab.gnome.org/GNOME/glib/) <br> A general-purpose utility library by GNOME. Widely used. <br> [**APR**](https://apr.apache.org) <br> Apache Portable Runtime, updating infrequently but stable. <br> [**gnulib**](https://www.gnu.org/software/gnulib/) <br> A collection of subroutines used by many GNU programs, also providing system header (e.g. `unistd.h`) polyfills for non-Un*x platforms (e.g. Windows). <br> [**tbox**](https://github.com/tboox/tbox) <br> Independent glib-like portable library, C99-compatible. Works best with [xmake](https://github.com/xmake-io/xmake/) build system from the same author. <br> [**sc**](https://github.com/tezc/sc) <br> Portable, stand-alone, single-header C libraries and data structures, C99-compatible. |

</div>

### Data Structures
Common data structures.

Also please take a look at all-in-one utility libraries in the previous section, because they often include data structure implementations.

<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|Generic Collections|[**Collections-C**](https://github.com/srdja/Collections-C) <br> Generic arrays, lists, hashmaps, and more. Use `void *` to store any type of data. <br> [**STC**](https://github.com/stclib/STC) <br> Similar to Collections-C, but uses macros  to simulate generics.|

</div>

### String Manipulation
<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|Dynamic Strings|[**sds**](https://github.com/antirez/sds) <br> Simple Dynamic Strings library. Inactive for a while. |
|Unicode Support|[**utf8.h**](https://github.com/sheredom/utf8.h) <br> Single-header UTF-8 library mimicking string.h functions. <br> [**ICU**](https://github.com/unicode-org/icu) <br> International Components for Unicode, official Unicode toolkit. Includes String iteration, collation, datetime formatting, parsing, locale-sensitive text segmentation, and more. Much more heavier.|
|SIMD Acceleration|[**StringZilla**](https://github.com/ashvardanian/StringZilla) <br> SIMD-accelerated string fuzzy matching, edit distance, and more. |
|Regular Expressions|[**hyperscan**](https://github.com/intel/hyperscan) <br> Intel's high-performance multi-thread text matching library. Use a well-designed callback-style API and may be too complex for simple use cases. <br> [**cre2**](https://github.com/marcomaggi/cre2) <br> C wrapper of Google's re2 library. Easier to use, but inactively maintained. <br> [**Onigmo**](https://github.com/k-takata/Onigmo) <br> Standalone regular expression library, a fork of Oniguruma. Easy to use but inactively maintained.|

</div>

### (De)serialization

<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|CSV|[**zsv**](https://github.com/liquidaty/zsv) <br> Fast (simd) CSV parser.|
|JSON|[**cJSON**](https://github.com/DaveGamble/cJSON) <br> Two-file, ultralightweight JSON parser in C89. Suitable for embedded systems, not thread safe. <br> [**json-c**](https://github.com/json-c/json-c) <br> A formal JSON parser for C, with multi-threaded support.|
|INI|[**inih**](https://github.com/benhoyt/inih) <br> Single header INI file parser, good for embedded systems.  |
|YAML|[**libyaml**](https://github.com/yaml/libyaml) <br> Official YAML parser, but inactive for a while.|
|TOML|[**tomlc99**](https://github.com/cktan/tomlc99) <br> C99-compliant TOML parser.|
|XML|[**libexpat**](https://github.com/libexpat/libexpat) <br> Fast streaming XML parser, C99-compliant.|
|HTML|[**lexbor**](https://github.com/lexbor/lexbor) <br> Not just a parser, but a full-featured HTML5 Renderer. It has HTML (de)serialization support. <br> [**myhtml**](https://github.com/lexborisov/myhtml) <br> A standalone HTML parser by the same author of lexbor. It has been deprecated in favor of lexbor.|

</div>

### Language Extensions
Try to add (or "simulate") some modern language features to C.

<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|Algebraic Data Types|[**datatype99**](https://github.com/Hirrolot/datatype99) <br> Intuitive algebraic data types with exhaustive pattern matching & compile-time introspection facilities. |
|Object-Oriented Programming|[**GObject**](https://docs.gtk.org/gobject) <br> The type system and object class support, primarily for GTK. Requires GLib.|

</div>

## System

### Memory Management
<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|Allocator|[**mimalloc**](https://github.com/microsoft/mimalloc) <br> Memory allocator with a focus on performance and small memory usage, from Microsoft. It claims to be faster than all the libraries below. <br> [**jemalloc**](https://github.com/jemalloc/jemalloc) <br> A general purpose malloc implementation that emphasizes fragmentation avoidance and scalable concurrency support, from Facebook. <br> [**tcmalloc**](https://github.com/gperftools/gperftools) <br> Thread-Caching Malloc, from Google. <br> [**rpmalloc**](https://github.com/mjansson/rpmalloc) <br> Memory allocator with built-in support for thread-caching, heap-pinning and small block merging. Independent.|
|Garbage Collector|[**Boehm-Demers-Weiser GC**](https://github.com/ivmai/bdwgc) <br> A general purpose, garbage collecting storage allocator.|

</div>

### Portable System Interface

Most all-in-one utilities also focus on portability. Check them first.

<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|General Case|[**plibsys**](https://github.com/saprykin/plibsys) <br> Highly portable interface for 15+ OSs and 10+ compilers. Zero-dependency.|

</div>

## I/O & Networking
Networking is the dullest part of C programming.

### Async Foundation
<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|Async I/O|[**libuv**](https://github.com/libuv/libuv) <br> Async library for TCP/UDP/DNS/IPC/Singal Handling/File Operations. Primarily developed for Node.js.|

</div>

### Protocol Support
<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|HTTP|[**libmicrohttpd**](https://www.gnu.org/software/libmicrohttpd/) <br> A small library that makes it easy to run an HTTP server. Widely used. <br> [**libhv**](https://github.com/ithewei/libhv) <br> Full-featured async library for TCP/UDP/HTTP(S)/WebSocket client/server/proxy, and MQTT client.|
|gRPC|**Note**: Unfortunately, there is no good gRPC library for C. The best way to use gRPC in C is to use the C++ bindings.|

</div>

## Database

C has incredibly complete support for databases, but it's not as easy as using other languages. Most are low-level libraries, and you have to write a lot of codes to use them.

### SQL Databases
<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|ORMs|**Note**: Unfortunately, there is no good ORM library for C, since C is lack of generics, reflection, compile-time code generation, OOP, etc. It is recommended to use a low-level SQL library, if you really need to use C.|
|MySQL|[**libmysqlclient**](https://dev.mysql.com/downloads/c-api/) <br> Official MySQL C API.|
|Postgres|[**libpq**](https://www.postgresql.org/docs/current/libpq.html) <br> Official Postgres C API.|
|SQLite|[**sqlite**](https://sqlite.org/) <br> Official SQLite library.|
|MS SQL|[**Microsoft® ODBC Driver for SQL Server®**](https://techcommunity.microsoft.com/t5/sql-server-blog/bg-p/SQLServer/label-name/SQLServerDrivers) <br> Official SQL driver, closed-source.|
|Oracle|[**ODPI-C**](https://oracle.github.io/odpi/) <br> Official Oracle C API.|

</div>

### Other Databases
<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|Redis|[**Hiredis**](https://github.com/redis/hiredis) <br> Minimalistic C client for Redis >= 1.2, officially supported. <br> [**Hiredis-cluster**](https://github.com/Nordix/hiredis-cluster) <br> for cluster deployments of the Redis database.|
|MongoDB|[**libmongoc**](https://github.com/mongodb/mongo-c-driver/) <br> Official MongoDB C driver.|
|Rocks DB|[**rocksdb**](https://github.com/facebook/rocksdb) <br> Official RocksDB library for C/C++.|

</div>

## Math / Scientific

Some all-in-one utilities also contain math and/or scientific subroutines; check them first.

**Note**: Mathematics and scientific computing is a very broad field. Considering that C has been one of the go-to languages for high-performance computing since its invention, there are lots of libraries in this area. We would like to include **all the common use cases for an average programmer (e.g., high-precision computation, linear algebra, transformations, etc.) instead of a math researcher** (you shouldn't rely on this list if you are doing serious mathematics, should you?), and it is not possible to discuss all of them in order to keep the list short.

<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|Big Integer|[**GMP**](https://gmplib.org/) <br> The GNU arbitrary-precision arithmetic library.|
|Big Decimal|[**MPFR**](https://www.mpfr.org/) <br> The GNU multiple-precision floating-point computation library with correct rounding.|
|Linear Algebra|[**OpenBLAS**](https://github.com/OpenMathLib/OpenBLAS) <br> An optimized BLAS (Basic Linear Algebra Subprograms) library. Mainly supports CPUs. <br> [**CLBlast**](https://github.com/CNugteren/CLBlast) <br> BLAS with OpenCL. Supports GPUs. <br> [**clBLAS**](https://github.com/clMathLibraries/clBLAS) <br> The most famous BLAS library with OpenCL, but unmaintained for a long time. <br> [**cuBLAS**](https://developer.nvidia.com/cublas) <br> NVIDIA's proprietary BLAS library with CUDA. Has the maximum performance on NVIDIA GPUs.|
|Fourier Transform|[**FFTW**](http://www.fftw.org/) <br> A fastest Discrete Fourier transform implementation.|
|DataFrame|[**Apache Arrow GLib**](https://github.com/apache/arrow/) <br> Official C API for Apache Arrow.|

</div>


## Command-Line Tool

### Argument Parsing
<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|POSIX/BSD-style (`-cvf`)| **getopt** <br> In POSIX specification, getopt is the standard method to parse command-line arguments. <br> [**getopt_long**](https://www.gnu.org/software/libc/manual/html_node/Getopt-Long-Options.html) <br> GNU extension of getopt that supports long options (--foo=bar) and has been widely accepted. Included in glibc and gnulib. <br> [**argparse**](https://github.com/cofyc/argparse) <br> Standalone argument parser supporting subcommands. Inactive for a while. <br> [**optparse**](https://github.com/skeeto/optparse) <br> Standalone, single-header argument parser, designed to prevent global variables, support resetting and printing error message to elsewhere instead of stderr, compared with getopt. Inactive for a while. <br> [**cmd_arger**](https://github.com/heroseh/cmd_arger) <br> A nice argument parser with declarative syntax and auto-generated help message. Inactive for a while.|
| DOS-style (`/C /V /F`) |[**getopt-dos**](https://github.com/ofey404/getopt-dos) <br> Like getopt, but supports DOS-style options. Not mature and unmaintained.|

</div>


### Terminal Rendering
<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|Progress indicators| [**progressbar**](https://github.com/doches/progressbar) <br>  An easy-to-use C library for displaying text progress bars. Inactive for a while.|
|TUI|[**ncurses**](https://gnu.org/software/ncurses) <br> De facto standard library for TUI. Only Un*x support. <br> [**pdcurses**](https://github.com/wmcbrine/PDCurses) <br> A curses implementation for DOS, OS/2, Windows console, X11 and SDL. |
|Interactive prompts| [**readline**](https://www.gnu.org/software/readline/) <br> De facto standard GNU library for interactive inputs. Bash is actually built on it, which supports history, completion, and line editing features. <br> [**linenoise**](https://github.com/antirez/linenoise) <br> A small, self-contained alternative to readline and libedit. Only Un*x support, and being inactive for a while.|

</div>

## Concurrency
<div class="table-wrapper" markdown="block">

|Use Case|Recommended Tools|
|---|---|
|Parallel computation|[**libgomp**](https://gcc.gnu.org/onlinedocs/libgomp/index.html) <br> GNU's OpenMP implementation, a set of compiler directives and library routines for parallel computation. Easy to learn and use. <br> [**Open MPI**](https://github.com/open-mpi/ompi) <br> Open source MPI implementation, used for parallel computation on distributed systems.|

</div>

## Cryptography

To Be Done

## Graphics

To Be Done

## FFI / Interop

To Be Done

